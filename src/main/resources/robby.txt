 PriorityQueue()
• PriorityQueue(int initialCapacity)
constructs a priority queue for storing Comparable objects.
• PriorityQueue(int initialCapacity, Comparator<? super E> c)
constructs a priority queue and uses the specified comparator for sorting its
elements.

java.util.Map<K, V> 1.2
• V get(Object key)
gets the value associated with the key; returns the object associated with the
key, or null if the key is not found in the map. Implementing classes may forbid
null keys.
• default V getOrDefault(Object key, V defaultValue)
gets the value associated with the key; returns the object associated with the
key, or defaultValue if the key is not found in the map.
• V put(K key, V value)
puts the association of a key and a value into the map. If the key is already
present, the new object replaces the old one previously associated with the
key. This method returns the old value of the key, or null if the key was not
previously present. Implementing classes may forbid null keys or values.
• void putAll(Map<? extends K, ? extends V> entries)
adds all entries from the specified map to this map.
• boolean containsKey(Object key)
returns true if the key is present in the map.
• boolean containsValue(Object value)
returns true if the value is present in the map.
• default void forEach(BiConsumer<? super K,? super V> action) 8
applies the action to all key/value pairs of this map.
java.util.HashMap<K, V> 1.2
• HashMap()
• HashMap(int initialCapacity)
• HashMap(int initialCapacity, float loadFactor)
constructs an empty hash map with the specified capacity and load factor (a
number between 0.0 and 1.0 that determines at what percentage of fullness the
hash table will be rehashed into a larger one). The default load factor is 0.75.
522 Chapter 9 Collections
ptg27506709
java.util.TreeMap<K,V> 1.2
• TreeMap()
constructs an empty tree map for keys that implement the Comparable interface.
• TreeMap(Comparator<? super K> c)
constructs a tree map and uses the specified comparator for sorting its keys.
• TreeMap(Map<? extends K, ? extends V> entries)
constructs a tree map and adds all entries from a map.
• TreeMap(SortedMap<? extends K, ? extends V> entries)
constructs a tree map, adds all entries from a sorted map, and uses the same
element comparator as the given sorted map.
java.util.SortedMap<K, V> 1.2
• Comparator<? super K> comparator()
returns the comparator used for sorting the keys, or null if the keys are compared
with the compareTo method of the Comparable interface.
• K firstKey()
• K lastKey()
returns the smallest or largest key in the map.

java.util.Map<K, V> 1.2
• default V merge(K key, V value, BiFunction<? super V,? super V,? extends V> remappingFunction)
8
If key is associated with a non-null value v, applies the function to v and value
and either associates key with the result or, if the result is null, removes the key.
Otherwise, associates key with value. Returns get(key).
• default V compute(K key, BiFunction<? super K,? super V,? extends V> remappingFunction) 8
Applies the function to key and get(key). Either associates key with the result or,
if the result is null, removes the key. Returns get(key).
• default V computeIfPresent(K key, BiFunction<? super K,? super V,? extends V>
remappingFunction) 8
If key is associated with a non-null value v, applies the function to key and v and
either associates key with the result or, if the result is null, removes the key.
Returns get(key).
• default V computeIfAbsent(K key, Function<? super K,? extends V> mappingFunction) 8
Applies the function to key unless key is associated with a non-null value. Either
associates key with the result or, if the result is null, removes the key. Returns
get(key).
• default void replaceAll(BiFunction<? super K,? super V,? extends V> function) 8
Calls the function on all entries. Associates keys with non-null results and
removes keys with null results.
• default V putIfAbsent(K key, V value) 8
If key is absent or associated with null, associates it with value and returns null.
Otherwise returns the associated value.

java.util.Map<K, V> 1.2
• Set<Map.Entry<K, V>> entrySet()
returns a set view of Map.Entry objects, the key/value pairs in the map. You can
remove elements from this set and they are removed from the map, but you
cannot add any elements.
• Set<K> keySet()
returns a set view of all keys in the map. You can remove elements from this
set and the keys and associated values are removed from the map, but you
cannot add any elements.
• Collection<V> values()
returns a collection view of all values in the map. You can remove elements
from this set and the removed value and its key are removed from the map,
but you cannot add any elements.
java.util.Map.Entry<K, V> 1.2
• K getKey()
• V getValue()
returns the key or value of this entry.
• V setValue(V newValue)
changes the value in the associated map to the new value and returns the old
value.

java.util.WeakHashMap<K, V> 1.2
• WeakHashMap()
• WeakHashMap(int initialCapacity)
• WeakHashMap(int initialCapacity, float loadFactor)
constructs an empty hash map with the specified capacity and load factor.
java.util.LinkedHashSet<E> 1.4
• LinkedHashSet()
• LinkedHashSet(int initialCapacity)
• LinkedHashSet(int initialCapacity, float loadFactor)
constructs an empty linked hash set with the specified capacity and load factor.
java.util.LinkedHashMap<K, V> 1.4
• LinkedHashMap()
• LinkedHashMap(int initialCapacity)
• LinkedHashMap(int initialCapacity, float loadFactor)
• LinkedHashMap(int initialCapacity, float loadFactor, boolean accessOrder)
constructs an empty linked hash map with the specified capacity, load factor,
and ordering. The accessOrder parameter is true for access order, false for insertion
order.

java.util.LinkedHashMap<K, V> 1.4 (Continued)
• protected boolean removeEldestEntry(Map.Entry<K, V> eldest)
should be overridden to return true if you want the eldest entry to be removed.
The eldest parameter is the entry whose removal is being contemplated. This
method is called after an entry has been added to the map. The default implementation
returns false—old elements are not removed by default. However,
you can redefine this method to selectively return true—for example, if the eldest
entry fits a certain condition or if the map exceeds a certain size.
java.util.EnumSet<E extends Enum<E>> 5
• static <E extends Enum<E>> EnumSet<E> allOf(Class<E> enumType)
returns a mutable set that contains all values of the given enumerated type.
• static <E extends Enum<E>> EnumSet<E> noneOf(Class<E> enumType)
returns a mutable set that is initially empty.
• static <E extends Enum<E>> EnumSet<E> range(E from, E to)
returns a mutable set that contains all values between from and to (inclusive).
• static <E extends Enum<E>> EnumSet<E> of(E e)
. . .
• static <E extends Enum<E>> EnumSet<E> of(E e1, E e2, E e3, E e4, E e5)
• static <E extends Enum<E>> EnumSet<E> of(E first, E... rest)
returns a mutable set containing the given elements which must not be null.
java.util.EnumMap<K extends Enum<K>, V> 5
• EnumMap(Class<K> keyType)
constructs an empty mutable map whose keys have the given type.
java.util.IdentityHashMap<K, V> 1.4
• IdentityHashMap()
• IdentityHashMap(int expectedMaxSize)
constructs an empty identity hash map whose capacity is the smallest power
of 2 exceeding 1.5 × expectedMaxSize. (The default for expectedMaxSize is 21.)
9.4 Maps 531
java.lang.System 1.0
• static int identityHashCode(Object obj) 1.1
returns the same hash code (derived from the object’s memory address) that
Object.hashCode computes, even if the class to which obj belongs has redefined
the hashCode method.


java.util.Collections 1.2
• static <E> Collection unmodifiableCollection(Collection<E> c)
• static <E> List unmodifiableList(List<E> c)
• static <E> Set unmodifiableSet(Set<E> c)
• static <E> SortedSet unmodifiableSortedSet(SortedSet<E> c)
• static <E> SortedSet unmodifiableNavigableSet(NavigableSet<E> c) 8
• static <K, V> Map unmodifiableMap(Map<K, V> c)
• static <K, V> SortedMap unmodifiableSortedMap(SortedMap<K, V> c)
• static <K, V> SortedMap unmodifiableNavigableMap(NavigableMap<K, V> c) 8
constructs a view of the collection; the view’s mutator methods throw an
UnsupportedOperationException.
• static <E> Collection<E> synchronizedCollection(Collection<E> c)
• static <E> List synchronizedList(List<E> c)
• static <E> Set synchronizedSet(Set<E> c)
• static <E> SortedSet synchronizedSortedSet(SortedSet<E> c)
• static <E> NavigableSet synchronizedNavigableSet(NavigableSet<E> c) 8
• static <K, V> Map<K, V> synchronizedMap(Map<K, V> c)
• static <K, V> SortedMap<K, V> synchronizedSortedMap(SortedMap<K, V> c)
• static <K, V> NavigableMap<K, V> synchronizedNavigableMap(NavigableMap<K, V> c) 8
constructs a view of the collection; the view’s methods are synchronized.
• static <E> Collection checkedCollection(Collection<E> c, Class<E> elementType)
• static <E> List checkedList(List<E> c, Class<E> elementType)
• static <E> Set checkedSet(Set<E> c, Class<E> elementType)
• static <E> SortedSet checkedSortedSet(SortedSet<E> c, Class<E> elementType)
• static <E> NavigableSet checkedNavigableSet(NavigableSet<E> c, Class<E> elementType) 8
• static <K, V> Map checkedMap(Map<K, V> c, Class<K> keyType, Class<V> valueType)
• static <K, V> SortedMap checkedSortedMap(SortedMap<K, V> c, Class<K> keyType, Class<V>
valueType)
• static <K, V> NavigableMap checkedNavigableMap(NavigableMap<K, V> c, Class<K> keyType,
Class<V> valueType) 8
• static <E> Queue<E> checkedQueue(Queue<E> queue, Class<E> elementType) 8
constructs a view of the collection; the view’s methods throw a ClassCastException
if an element of the wrong type is inserted.
• static <E> List<E> nCopies(int n, E value)
yields an unmodifiable list with n identical values.

java.util.Collections 1.2 (Continued)
• static <E> List<E> singletonList(E value)
• static <E> Set<E> singleton(E value)
• static <K, V> Map<K, V> singletonMap(K key, V value)
yields a singleton list, set, or map. As of Java 9, use one of the of methods
instead.
• static <E> List<E> emptyList()
• static <T> Set<T> emptySet()
• static <E> SortedSet<E> emptySortedSet()
• static NavigableSet<E> emptyNavigableSet()
• static <K,V> Map<K,V> emptyMap()
• static <K,V> SortedMap<K,V> emptySortedMap()
• static <K,V> NavigableMap<K,V> emptyNavigableMap()
• static <T> Enumeration<T> emptyEnumeration()
• static <T> Iterator<T> emptyIterator()
• static <T> ListIterator<T> emptyListIterator()
yields an empty collection, map, or iterator.

java.util.Collections 1.2
• static <T extends Comparable<? super T>> void sort(List<T> elements)
sorts the elements in the list, using a stable sort algorithm. The algorithm is
guaranteed to run in O(n log n) time, where n is the length of the list.
• static void shuffle(List<?> elements)
• static void shuffle(List<?> elements, Random r)
randomly shuffles the elements in the list. This algorithm runs in O(n a(n))
time, where n is the length of the list and a(n) is the average time to access
an element.
java.util.List<E> 1.2
• default void sort(Comparator<? super T> comparator) 8
Sorts this list, using the given comparator.

java.util.Arrays 1.2
• static <E> List<E> asList(E... array)
returns a list view of the elements in an array that is modifiable but not
resizable.
java.util.List<E> 1.2
• List<E> subList(int firstIncluded, int firstExcluded)
returns a list view of the elements within a range of positions.
java.util.SortedSet<E> 1.2
• SortedSet<E> subSet(E firstIncluded, E firstExcluded)
• SortedSet<E> headSet(E firstExcluded)
• SortedSet<E> tailSet(E firstIncluded)
returns a view of the elements within a range.

java.util.NavigableSet<E> 6
• NavigableSet<E> subSet(E from, boolean fromIncluded, E to, boolean toIncluded)
• NavigableSet<E> headSet(E to, boolean toIncluded)
• NavigableSet<E> tailSet(E from, boolean fromIncluded)
returns a view of the elements within a range. The boolean flags determine
whether the bounds are included in the view.
java.util.SortedMap<K, V> 1.2
• SortedMap<K, V> subMap(K firstIncluded, K firstExcluded)
• SortedMap<K, V> headMap(K firstExcluded)
• SortedMap<K, V> tailMap(K firstIncluded)
returns a map view of the entries whose keys are within a range.
java.util.NavigableMap<K, V> 6
• NavigableMap<K, V> subMap(K from, boolean fromIncluded, K to, boolean toIncluded)
• NavigableMap<K, V> headMap(K from, boolean fromIncluded)
• NavigableMap<K, V> tailMap(K to, boolean toIncluded)
returns a map view of the entries whose keys are within a range.

java.util.Comparator<T> 1.2
• static <T extends Comparable<? super T>> Comparator<T> reverseOrder() 8
Yields a comparator that reverses the ordering provided by the Comparable
interface.
• default Comparator<T> reversed() 8
Yields a comparator that reverses the ordering provided by this comparator.

java.util.Collections 1.2
• static <T extends Comparable<? super T>> int binarySearch(List<T> elements, T key)
• static <T> int binarySearch(List<T> elements, T key, Comparator<? super T> c)
searches for a key in a sorted list, using a binary search if the element type
implements the RandomAccess interface, and a linear search in all other cases. The
methods are guaranteed to run in O(a(n) log n) time, where n is the length of
the list and a(n) is the average time to access an element. The methods return
either the index of the key in the list, or a negative value i if the key is not
present in the list. In that case, the key should be inserted at index -i - 1 for
the list to stay sorted.
java.util.Collections 1.2
• static <T extends Comparable<? super T>> T min(Collection<T> elements)
• static <T extends Comparable<? super T>> T max(Collection<T> elements)
• static <T> min(Collection<T> elements, Comparator<? super T> c)
• static <T> max(Collection<T> elements, Comparator<? super T> c)
returns the smallest or largest element in the collection. (The parameter bounds
are simplified for clarity.)
• static <T> void copy(List<? super T> to, List<T> from)
copies all elements from a source list to the same positions in the target list.
The target list must be at least as long as the source list.
• static <T> void fill(List<? super T> l, T value)
sets all positions of a list to the same value.
• static <T> boolean addAll(Collection<? super T> c, T... values) 5
adds all values to the given collection and returns true if the collection changed
as a result.
• static <T> boolean replaceAll(List<T> l, T oldValue, T newValue) 1.4
replaces all elements equal to oldValue with newValue.
• static int indexOfSubList(List<?> l, List<?> s) 1.4
• static int lastIndexOfSubList(List<?> l, List<?> s) 1.4
returns the index of the first or last sublist of l equaling s, or -1 if no sublist
of l equals s. For example, if l is [s, t, a, r] and s is [t, a, r], then both methods
return the index 1.
• static void swap(List<?> l, int i, int j) 1.4
swaps the elements at the given offsets.
• static void reverse(List<?> l)
reverses the order of the elements in a list. For example, reversing the list [t,
a, r] yields the list [r, a, t]. This method runs in O(n) time, where n is the
length of the list.

java.util.Collections 1.2 (Continued)
• static void rotate(List<?> l, int d) 1.4
rotates the elements in the list, moving the entry with index i to position
(i + d) % l.size(). For example, rotating the list [t, a, r] by 2 yields the list
[a, r, t]. This method runs in O(n) time, where n is the length of the list.
• static int frequency(Collection<?> c, Object o) 5
returns the count of elements in c that equal the object o.
• boolean disjoint(Collection<?> c1, Collection<?> c2) 5
returns true if the collections have no elements in common.
java.util.Collection<T> 1.2
• default boolean removeIf(Predicate<? super E> filter) 8
removes all matching elements.
java.util.List<E> 1.2
• default void replaceAll(UnaryOperator<E> op) 8
applies the operation to all elements of this list.
java.util.Collections 1.2 (Continued)
• static void rotate(List<?> l, int d) 1.4
rotates the elements in the list, moving the entry with index i to position
(i + d) % l.size(). For example, rotating the list [t, a, r] by 2 yields the list
[a, r, t]. This method runs in O(n) time, where n is the length of the list.
• static int frequency(Collection<?> c, Object o) 5
returns the count of elements in c that equal the object o.
• boolean disjoint(Collection<?> c1, Collection<?> c2) 5
returns true if the collections have no elements in common.
java.util.Collection<T> 1.2
• default boolean removeIf(Predicate<? super E> filter) 8
removes all matching elements.
java.util.List<E> 1.2
• default void replaceAll(UnaryOperator<E> op) 8
applies the operation to all elements of this list.
java.util.Collections 1.2
• static <T> Enumeration<T> enumeration(Collection<T> c)
returns an enumeration that enumerates the elements of c.
• public static <T> ArrayList<T> list(Enumeration<T> e)
returns an array list containing the elements enumerated by e.
java.util.Properties 1.0
• Properties()
creates an empty property map.
• Properties(Properties defaults)
creates an empty property map with a set of defaults.
• String getProperty(String key)
gets a property. Returns the string associated with the key, or the string associated
with the key in the default table if it wasn’t present in the table, or null if
the key wasn’t present in the default table either.
• String getProperty(String key, String defaultValue)
gets a property with a default value if the key is not found. Returns the string
associated with the key, or the default string if it wasn’t present in the table.
• Object setProperty(String key, String value)
sets a property. Returns the previously set value of the given key.
• void load(InputStream in) throws IOException
loads a property map from an input stream.
• void store(OutputStream out, String header) 1.2
saves a property map to an output stream. The header in the first line of the
stored file.

java.lang.System 1.0
• Properties getProperties()
retrieves all system properties. The application must have permission to retrieve
all properties, or a security exception is thrown.
• String getProperty(String key)
retrieves the system property with the given key name. The application must
have permission to retrieve the property, or a security exception is thrown. The
following properties can always be retrieved:
java.version
java.vendor
java.vendor.url
java.home
java.class.path
java.library.path
java.class.version
os.name
os.version
os.arch
file.separator
path.separator
line.separator
java.io.tempdir
user.name
user.home
user.dir
java.compiler
java.specification.version
java.specification.vendor
java.specification.name
java.vm.specification.version
java.vm.specification.vendor
java.vm.specification.name
java.vm.version
java.vm.vendor
java.vm.name

java.util.Stack<E> 1.0
• E push(E item)
pushes item onto the stack and returns item.
• E pop()
pops and returns the top item of the stack. Don’t call this method if the stack
is empty.
• E peek()
returns the top of the stack without popping it. Don’t call this method if the
stack is empty.
